name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd Frontend
          npm install

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build         
          docker-compose -f docker-compose.yml push

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd Frontend && npm install

      - name: Run unit tests
        run: cd Frontend && npm run test

      - name: Run Cypress tests
        run: |
          cd Frontend
          npm install cypress
          npx cypress run
          
      - name: Notify on failure
        if: failure()
        run: |
          SLACK_MESSAGE=$(cat <<EOF
          {
            "channel": "#notification",
            "text": "Build, test, or deploy failed for ${{ github.repository }} on ${{ github.ref }}. Check the logs for more details.",
            "attachments": [
              {
                "color": "danger",
                "text": "Error in ${{ job.status }}",
                "fields": [
                  {
                    "title": "Job",
                    "value": "${{ github.job }}"
                  },
                  {
                    "title": "Ref",
                    "value": "${{ github.ref }}"
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}"
                  }
                ]
              }
            ]
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" https://slack.com/api/chat.postMessage -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}"

  deploy:
    name: Deploy to Netlify
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Install project dependencies
        run: |
          cd Frontend
          npm install

      - name: Build project
        run: |
          cd Frontend
          npm run build

      - name: Deploy production to Netlify
        uses: South-Paw/action-netlify-deploy@v1.2.0
        with:
          github-token: ${{ secrets.TOKEN }}
          netlify-auth-token: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          netlify-site-id: ${{ secrets.NETLIFY_SITE_ID }}
          build-dir: 'Frontend/dist'
          comment-on-commit: true

      - name: Notify deployment status
        run: |
          echo "Deployment to Netlify completed."
      

      - name: Notify on failure
        if: failure()
        run: |
          SLACK_MESSAGE=$(cat <<EOF
          {
            "channel": "#notification",
            "text": "Build, test, or deploy failed for ${{ github.repository }} on ${{ github.ref }}. Check the logs for more details.",
            "attachments": [
              {
                "color": "danger",
                "text": "Error in ${{ job.status }}",
                "fields": [
                  {
                    "title": "Job",
                    "value": "${{ github.job }}"
                  },
                  {
                    "title": "Ref",
                    "value": "${{ github.ref }}"
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}"
                  }
                ]
              }
            ]
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" https://slack.com/api/chat.postMessage -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}"
      - name: Notify on success
        if: success()
        run: |
          SLACK_MESSAGE=$(cat <<EOF
          {
            "channel": "#notification",
            "text": "Build, test, and deploy succeeded for ${{ github.repository }} on ${{ github.ref }}."
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" https://slack.com/api/chat.postMessage -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}"



