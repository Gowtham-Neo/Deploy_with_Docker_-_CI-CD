name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: |
          cd Frontend
          npm install
          npm install --save-dev @types/cypress

      - name: Build project
        run: cd Frontend && npm run build

      - name: Rename files with invalid characters
        run: |
          find Frontend/dist -name '*:*' -exec bash -c 'mv "$1" "${1//:/_}"' -- {} \;

      - name: Verify dist directory contents
        run: ls -la Frontend/dist

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build         
          docker-compose -f docker-compose.yml push

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: Frontend/dist
          if-no-files-found: warn

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd Frontend && npm install

      - name: Run unit tests
        run: cd Frontend && npm run test

      - name: Run Cypress tests
        run: |
          cd Frontend
          npm install cypress
          npx cypress run

  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: Frontend/dist

      - name: Verify dist directory contents
        run: ls -la Frontend/dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.TOKEN }}
          publish_dir: Frontend/dist
          publish_branch: gh-pages # Specify the branch where GitHub Pages is hosted
          force_orphan: true       # Force to initialize the branch as an orphan
          cname: example.com

  notify:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]

    steps:
      - name: Notify on failure
        if: failure()
        run: |
          SLACK_MESSAGE=$(cat <<EOF
          {
            "channel": "#sports-center",
            "text": "Build, test, or deploy failed for ${{ github.repository }} on ${{ github.ref }}. Check the logs for more details.",
            "attachments": [
              {
                "color": "danger",
                "text": "Error in ${{ job.status }}",
                "fields": [
                  {
                    "title": "Job",
                    "value": "${{ github.job }}"
                  },
                  {
                    "title": "Ref",
                    "value": "${{ github.ref }}"
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}"
                  }
                ]
              }
            ]
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" https://slack.com/api/chat.postMessage -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}"

      - name: Notify on success
        if: success()
        run: |
          SLACK_MESSAGE=$(cat <<EOF
          {
            "channel": "#sports-center",
            "text": "Build, test, and deploy succeeded for ${{ github.repository }} on ${{ github.ref }}."
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" https://slack.com/api/chat.postMessage -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}"
